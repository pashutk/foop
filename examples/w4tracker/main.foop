import sin from ./math

wasm rectR(x i32, y i32, w i32, h i32) () {
  (local.get $x)
  (local.get $y)
  (local.get $w)
  (local.get $h)
  (call $rect)
}

wasm clock(address i32) i32 {
  (local $newclock i32)

  (i32.add
    (i32.load16_u (local.get $address))
    (i32.const 1))
  (local.set $newclock)

  (i32.store16
    (local.get $address)
    (local.get $newclock)
  )

  (local.get $newclock)
}

wasm divU(a i32, b i32) i32 {
  (i32.div_u (local.get $a) (local.get $b))
}

wasm truncF(f f32) i32 {
  (i32.trunc_f32_s (local.get $f))
}

export function update() () {
  let clockAddress = 64
  let c = clock(clockAddress)
  let x = divU(c, 2)
  let s f32 = sin(1.0)
  let strunc = truncF(s)
  rectR(strunc, 10, 32, 32)
}
